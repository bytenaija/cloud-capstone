service:
  name: serverless-evly

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    URLS_TABLE: Evly-bytenaija-${self:provider.stage}
    EVLY_INDEX: EvlyIdIndex
    EVLY_INDEX_GSI: EvlyIdIndexGsi2
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-evly-images-bytenaija-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: AUTH_0_SECRET
    AUTH_0_SECRET: m_nkS_w5MseSSyTB9kZDmqlfdX38dUwOdYHQTxGt_EpL4JtfBoR-4CzeRgjXbcDB

custom:
  topicName: evlysTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Evly API
        description: Serverless application for Evly list
    models:
      - name: CreateEvlyRequest
        contentType: application/json
        schema: ${file(models/create-evly-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # EVLY: Configure this function
  GetUrls:
    handler: src/lambda/http/getUrls.handler
    events:
      - http:
          method: get
          path: urls
          cors: true
          authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            description: Get the URL list
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}/index/${self:provider.environment.EVLY_INDEX}

  # EVLY: Configure this function
  CreateUrl:
    handler: src/lambda/http/createUrl.handler
    events:
      - http:
          method: post
          path: urls
          cors: true
          authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            description: Create a new shortend url
            requestModels:
              'application/json': CreateEvlyRequest
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    # iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}/${self:provider.environment.EVLY_INDEX}

  # EVLY: Configure this function
  UpdateUrl:
    handler: src/lambda/http/updateUrl.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}/index/${self:provider.environment.EVLY_INDEX}
    events:
      - http:
          method: patch
          path: urls/{urlId}
          cors: true
          authorizer: Auth
      - http:
          method: put
          path: urls/{urlId}
          cors: true
          authorizer: Auth
          # reqValidatorName: RequestBodyValidator
        documentation:
          description: Update a url
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  # EVLY: Configure this function
  DeleteUrl:
    handler: src/lambda/http/deleteUrl.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.URLS_TABLE}
    events:
      - http:
          method: delete
          path: urls/{urlId}
          cors: true
          authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            description: Delete a url
            requestModels:
              # 'application/json': CreateEvlyRequest
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  # EVLY: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: urls/{urlId}/attachment
          cors: true
          # authorizer: Auth
          documentation:
            description: Generate a signed URL
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

resources:
  # EVLY: Add any necessary AWS resources
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,PUT,DELETE'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    EvlyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: urlId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: shortUrl
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: urlId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.URLS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVLY_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # S3 Bucket Policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*' # Anyone
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
